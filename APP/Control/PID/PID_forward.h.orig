//-----------------------------------------------------------------------------
// PID_forward.h
//
//  Created on	: 2017-1-15
//      Author	: ZB
//		version	: V1.0
//		brief	: 位置控制算法的实现(与位置量的类型无关，比如可以使位移，也可以是角度)；
//			      采用前馈方式，输入是位置量，输出是速度控制量。
//-----------------------------------------------------------------------------
// Attention:
//

//-----------------------------------------------------------------------------
// Define to prevent recursive inclusion
//-----------------------------------------------------------------------------
#ifndef _PID_FORWARD_H_
#define _PID_FORWARD_H_
#include "stm32f4xx.h"
#include "My_Math.h"

#ifdef __cplusplus  
extern "C" {
#endif 

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Private Typedef
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Private Define
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Private Macro
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Exported constant
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Extern Variables
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Exported functions
//-----------------------------------------------------------------------------
typedef struct 
{
	int32_t kf;				/*前馈系数*/
	int32_t kp_aclt;		/*反馈系数(非减速阶段)*/
	int32_t kp_decr;		/*反馈系数(减速阶段)*/
	int32_t kd_aclt;		/*微分系数(加速阶段)*/
	int32_t kd_decr;		/*微分系数(减速阶段)*/
	int32_t min_out;		/*最小控制量输出*/
	int32_t max_out;		/*最大控制量输出*/
	int32_t vect_v;         /*输出速度方向*/

	int32_t start_v;		/*初速度(mm/s)*/
	int32_t unif_v;		    /*匀速速度(mm/s)*/
	int32_t end_v;	        /*末速度(mm/s)*/
	int32_t aclt;	     	/*加速度(mm/s/s)*/
	int32_t decr;	    	/*减速度(mm/s/s)*/
	
	int32_t total_len;		/*总路程(mm)*/
	int32_t cmd_pos[3];	    /*指令位置(mm)*/
	int32_t real_pos;		/*真实位置(mm)*/

	uint32_t start_time;    /*本路段的开始时间(ms)*/
	uint32_t end_time;		/*本路段的结束时间(ms)*/
	uint32_t aclt_time;		/*加速结束时间点(ms)*/
	uint32_t unif_time;		/*匀速结束时间点，uniform_time(ms)*/
	uint32_t decr_time;		/*减速过程的时间长度(ms)*/
}
forward_ctl_t;  
/*
*	常量
*/
#define FWD_CTL_PERIOD	(CONTROL_PERIOD_MS) /*前馈控制周期10ms*/
/*控制周期ms*/
#define CONTROL_PERIOD_MS (10)
#define CONTROL_PERIOD_S  ((double)CONTROL_PERIOD_MS / 1000.0)

void update_forward_param(forward_ctl_t * p, int32_t * param);
void update_g_speed_param(forward_ctl_t * p, int32_t * param);
void update_forward_ctl(forward_ctl_t * p, uint32_t start_time);
int32_t forward_ctl(forward_ctl_t *p, int32_t current_pos, uint32_t current_time);

#ifdef __cplusplus  
}
#endif 

#endif /* __PID_FORWARD_H_ */

/******************* (C) COPYRIGHT 2016 ZB ***********END OF FILE***********/




