//-----------------------------------------------------------------------------
// Route_Control.c
//
//  Created on	: 2017-11-10
//      Author	: 李彪
//		version	: V1.0
//		brief	:
//-----------------------------------------------------------------------------
// Attention:
//
#include "Route_Control.h"
#include "Basal_Move.h"
#include "Vect.h"
#include "PID_forward.h"
#include "My_Math.h"
#include "PID_Parameter.h"
#include "PID_Control.h"
#include "GYRO_Lib.h"
#include "Robot.h"
#include <stdint.h>
#include "Time.h"
#define GetCurSpd() (G_Robot_Master.cur_speed)             /*获取当前速度的指针*/
#define GetCurLocationPointer() (&G_Robot_Master.Now_Position) /*获取当前位置指针*/

/*直线控制相关*/
forward_ctl_t RouteToSet;
/*前馈参数*/
extern int32_t forwardParam[7];
extern int32_t L_Speed[4];
extern int32_t H_Speed[4];
/*记录起始位置*/
int32_t start_pos_X, start_pos_Y;

/*设定Y直线式前馈参数*/
void setup_Xline(int32_t Xtarget)
{
	/*记录起始位置*/
	start_pos_X = nloc.Coords.x;
	//forward_ctl_t RouteToSet;
	memset(&RouteToSet, 0, sizeof(forward_ctl_t));
	/*设置路程*/
	RouteToSet.vect_v = Xtarget- nloc.Coords.x;
	int32_t cur_spd;            /*当前车速在Y直线上的分量*/
	cur_spd = GetCurSpd() * my_cos(nloc.Angle);
	RouteToSet.start_v = my_abs(cur_spd);
	/*设置总路程*/
	RouteToSet.total_len = my_abs(RouteToSet.vect_v);
	/*设置速度参数*/
	//    if (RouteToSet.total_len > 9000)
	//    {
	//        update_g_speed_param(&RouteToSet, L_Speed);    //跑装盘区
	//    }
	//    else    //(RouteToSet.total_len < 9000)
	//    {
	update_g_speed_param(&RouteToSet, L_Speed);
	//    }
	/*设定前馈参数*/
	update_forward_param(&RouteToSet, forwardParam);

	/*初始化前馈控制*/

	update_forward_ctl(&RouteToSet, GetSysTime_us() / 1000.0f);
#if defined(DEBUG_PRINTF)
	printf("& Forward &  Start_pos:  %d\tEnd_pos:  %d\r\n", start_pos_X, Xtarget);
	printf("& Forward &  Start_Time: %d\tEnd_Time: %d\r\n", (int32_t)RouteToSet.start_time, (int32_t)RouteToSet.end_time);
	printf("&  aclt_time: %d\tunif_time: %d\tstart_v: %d\r\n", (int32_t)RouteToSet.aclt_time, (int32_t)RouteToSet.unif_time, (int32_t)RouteToSet.start_v);
	printf("& unif_v: %d\taclt: %d\tdecr: %d\r\n", (int32_t)RouteToSet.unif_v, (int32_t)RouteToSet.aclt, (int32_t)RouteToSet.decr);
	printf("& Kf: %d\tKp_a: %d\tKp_d: %d\r\n", RouteToSet.kf, RouteToSet.kp_aclt, RouteToSet.kp_decr);
	printf("& Kd_a: %d\tKd_d: %d\tMax: %d\tMin: %d\r\n", RouteToSet.kd_aclt, RouteToSet.kd_decr, RouteToSet.max_out, RouteToSet.min_out);
#endif
}


/*设定Y直线式前馈参数*/
void setup_Yline(int32_t Ytarget)
{
    /*记录起始位置*/
	start_pos_Y = nloc.Coords.y;
    //forward_ctl_t RouteToSet;
    memset(&RouteToSet, 0, sizeof(forward_ctl_t));
    /*设置路程*/
    RouteToSet.vect_v = Ytarget- nloc.Coords.y;
    int32_t cur_spd;            /*当前车速在Y直线上的分量*/
    cur_spd = GetCurSpd() * my_cos(nloc.Angle);
    RouteToSet.start_v = my_abs(cur_spd);
    /*设置总路程*/
    RouteToSet.total_len = my_abs(RouteToSet.vect_v);
    /*设置速度参数*/
//    if (RouteToSet.total_len > 9000)
//    {
//        update_g_speed_param(&RouteToSet, L_Speed);    //跑装盘区
//    }
//    else    //(RouteToSet.total_len < 9000)
//    {
    update_g_speed_param(&RouteToSet, L_Speed);
//    }
    /*设定前馈参数*/
    update_forward_param(&RouteToSet, forwardParam);

    /*初始化前馈控制*/

    update_forward_ctl(&RouteToSet,GetSysTime_us() / 1000.0f);
#if defined(DEBUG_PRINTF)
    printf("& Forward &  Start_pos:  %d\tEnd_pos:  %d\r\n", start_pos_Y,Ytarget);
    printf("& Forward &  Start_Time: %d\tEnd_Time: %d\r\n",(int32_t) RouteToSet.start_time, (int32_t)RouteToSet.end_time);
    printf("&  aclt_time: %d\tunif_time: %d\tstart_v: %d\r\n", (int32_t)RouteToSet.aclt_time,(int32_t) RouteToSet.unif_time,(int32_t)RouteToSet.start_v);
    printf("& unif_v: %d\taclt: %d\tdecr: %d\r\n", (int32_t)RouteToSet.unif_v, (int32_t)RouteToSet.aclt,(int32_t)RouteToSet.decr);
    printf("& Kf: %d\tKp_a: %d\tKp_d: %d\r\n", RouteToSet.kf, RouteToSet.kp_aclt, RouteToSet.kp_decr);
    printf("& Kd_a: %d\tKd_d: %d\tMax: %d\tMin: %d\r\n", RouteToSet.kd_aclt, RouteToSet.kd_decr, RouteToSet.max_out,RouteToSet.min_out);
#endif
}


//直线控制
void control_Xline(void)
{
	int32_t          real_pos;							    /*当前的实际位置*/
	int32_t          ctl_v;								    /*前馈速度控制量*/

	real_pos = my_abs(nloc.Coords.x - start_pos_X);

	ctl_v = forward_ctl(&RouteToSet, real_pos, GetSysTime_us() / 1000.0f);

	if (ctl_v > RouteToSet.max_out) ctl_v = RouteToSet.max_out;
	else if (ctl_v < RouteToSet.min_out) ctl_v = RouteToSet.min_out;

	/*调用走直线函数计算轮子速度*/
	linear_speed(RouteToSet.vect_v, 0, nloc.Angle, ctl_v);
}
//直线控制
void control_Yline(void)
{
    int32_t          real_pos;							    /*当前的实际位置*/
    int32_t          ctl_v;								    /*前馈速度控制量*/

    real_pos = my_abs(nloc.Coords.y - start_pos_Y);

    ctl_v = forward_ctl(&RouteToSet, real_pos,  GetSysTime_us() / 1000.0f);

    if (ctl_v > RouteToSet.max_out) ctl_v = RouteToSet.max_out;
    else if (ctl_v < RouteToSet.min_out) ctl_v = RouteToSet.min_out;

    /*调用走直线函数计算轮子速度*/
    linear_speed(0,RouteToSet.vect_v, nloc.Angle,ctl_v);
}




/******************* (C) COPYRIGHT 2017 李彪 ***********END OF FILE***********/

